package PenetrationTestingAutomatized;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

public class MetasploitExploitationTool implements ExploitationModule{
	//object for handling the subprocesses, in this case NMAP
	private ProcessBuilder process;
	
	public MetasploitExploitationTool() {
		this.process = new ProcessBuilder();
	}
	
	@Override
	public void searchAndExploit(List<String> exploitsList) {
		// search metasploit compatible exploits:
		List<String> MetasploitCompatibleExploits = new ArrayList<String>();
		
		for(String exploit : exploitsList) {
			if(exploit.contains("MSF:")) MetasploitCompatibleExploits.add(exploit);
		}
		System.out.println("METASPLOIT COMPATIBLE EXPLOITS: \n");
		System.out.println(MetasploitCompatibleExploits.toString());
		
		//adjust directory to the right one identified by the currentTestPath var
		this.process.directory(AutomatizedPenetrationTestingScript.currentTestPath.toFile());
		
		try {
			//search and use for all the exploits given
			for(String exploit : exploitsList) {
				//start metasploit and wait for the execution 
				//gnome-terminal --window -- msfconsole [open in a new window]
				process.command("gnome-terminal","--window","--","msfconsole").inheritIO().start().waitFor();
				//replace the string MSF: at the start for adjusting the search parameter in metasploit
				process.command("use", exploit.replace("MSF:", "")).inheritIO().start().waitFor();
			}
		} catch (InterruptedException | IOException e) {
			if(e instanceof IOException) System.err.println("I/O ERROR DURING EXECUTION OF THE SUBPROCESS");
			if(e instanceof InterruptedException) System.err.println("ERROR WHILE INTERRUPTING THE SUBPROCESS");
			e.printStackTrace();
		}
	}

}
